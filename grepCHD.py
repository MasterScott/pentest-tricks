#!/usr/bin/env python

# Copyright (C) 2015 Sebastien MACKE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2, as published by the
# Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details (http://www.gnu.org/licenses/gpl.txt).

import logging

from sys import argv, stdin, exc_info, exit
from platform import system
import traceback
import re
import os

fmt = logging.Formatter('%(message)s')

sh = logging.StreamHandler()
sh.setFormatter(fmt)
sh.setLevel(logging.INFO)

fh = logging.FileHandler('grepCHD.log')
fh.setFormatter(fmt)
fh.setLevel(logging.DEBUG)

logging.getLogger().setLevel(logging.DEBUG)

logging.getLogger().addHandler(sh)
logging.getLogger().addHandler(fh)

# Luhn checking stolen from http://stackoverflow.com/q/21079439
def luhn_checksum(card_number):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = 0
    checksum += sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10

def is_luhn_valid(card_number):
    return luhn_checksum(card_number) == 0

def walk_tree(toppath):
  tp = os.path.normpath(toppath)
  for root, dirnames, filenames in os.walk(tp):
    for fn in filenames:
      fp = os.path.join(root, fn)
      yield fp
    for dn in dirnames:
      walk_tree(dn)

def color_context(ctx, cc):
  if not on_windows:
    return re.sub(cc, '\033[1m\033[31m'+cc+'\033[0m', ctx)
  else:
    return ctx

pan_all = '[3-6][0-9]{3}.?[0-9]{4}.?[0-9]{4}.?[0-9]{1,4}' # 13-16 digits

# https://en.wikipedia.org/wiki/Bank_card_number
pan_re = [
  ('Visa', '4[0-9]{3}[0-9]{4}[0-9]{4}[0-9]{1,4}'), # 13-16 digits
  ('MasterCard', '5[1-5][0-9]{2}[0-9]{4}[0-9]{4}[0-9]{4}'), # 16 digits
  ('Amex', '3[47][0-9]{2}[0-9]{6}[0-9]{5}'), # 15 digits
  ('Diners', '30[0-59][0-9]{11}'), # 14 digits
  ('Diners', '3[689][0-9]{13}'),
  ('Discover', '6011[0-9]{11}'), # 16 digits
  ('Discover', '622[0-9]{13}'),
  ('Discover', '64[4-9][0-9]{13}'),
  ('Discover', '65[0-9]{14}'),
  ('Maestro', '6[0-9][0-9][0-9]{9,16}'), # overlaps with Discover
  ('Maestro', '5[06][0-9][0-9]{9,16}'), # 12-19 digits
  ('Interpayment', '636[0-9]{13,16}'), # 16-19 digits
  ('JCB', '35[2-8][0-9]{13}'), # 16 digits
  ]

track_re = [
  ('Track 1', 'B__CCNUM__\^(.+?)\^(\d{4})\d{3}'),
  ('Track 2', '__CCNUM__[D=](\d{4})'),
  ]

def find_cc(filepath):

  if isinstance(filepath, basestring):
    fd, fname = open(filepath), filepath
  else:
    fd, fname = filepath, 'stdin'

  while True:
    line = fd.readline(1000000)
    if len(line) == 0:
      break

    line = line.rstrip()

    cc_all = re.findall('%s' % pan_all, line)
    if not cc_all:
      continue

    for cc in cc_all:

      if re.search(r'[^\x20-\x7F]', cc):
        continue

      cc_num = re.sub("\D", "", cc)

      if not is_luhn_valid(cc_num):
        continue

      if cc_num == '4111111111111111':
        continue

      for cc_type, cc_re in pan_re:
        if re.match(cc_re, cc_num):
          break
      else:
        continue

      for ttype, tre in track_re:
        
        track_match = re.search(tre.replace('__CCNUM__', cc_num), line, re.I)
        if track_match:
          if ttype == 'Track 1':
            track_infos = '%s %s' % (track_match.group(2), track_match.group(1).strip())
          else:
            track_infos = '%s' % track_match.group(1)
          break

      if track_match:
        cc_num= '%s %s' % (cc_num, track_infos.strip())

      line = re.sub(r'[\x00-\x1F]+', '', line)
      line = re.sub(r'[\x7F-\xFF]+', '.', line)
      line = re.sub(r'[\x09\x20]+', ' ', line)

      cc_ctx = re.search('(.{0,50}%s.{0,50})' % cc, line).group(1).strip()
      cc_ctx = color_context(cc_ctx, cc)

      logging.info('%s: %s %s - %s' % (fname, cc_type, cc_num, cc_ctx))

      line = line[line.index(cc) + len(cc):]

def search_file(filepath):
  try:
    find_cc(filepath)
  except KeyboardInterrupt:
    exit(0)
  except:
    traceback.print_exc()

on_windows = 'Win' in system()

if len(argv) == 1:
  search_file(stdin)
else:
  for arg in argv[1:]:
    if os.path.isdir(arg):
      for f in walk_tree(arg):
        if os.path.isfile(f):
          search_file(f)

    elif os.path.isfile(arg):
      search_file(arg)

# vim: ts=2 sw=2 sts=2 et fdm=marker bg=dark
