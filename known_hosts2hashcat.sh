#!/bin/bash

# Copyright (C) 2015 Sebastien MACKE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2, as published by the
# Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details (http://www.gnu.org/licenses/gpl.txt).

# A simple Bash script to help format and run Hashcat against hashed known_hosts.

Usage='
$ cat > /tmp/known_hosts <<EOF
github.com,192.30.252.130 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
10.0.10.100 ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJjcDyv2/2i6bk5YFZl2GNqdMRYeBWmogDXWGRpZo9Rgo6xQOWBRxMmDpdYCm40h68ilBRIdDUh9LnQVeHMDMw4=
[127.0.0.1]:443 ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGBymDXO+NxHqJ/11Qnuq/bgl4/p6cgbtk13JkFNnx/i
EOF

$ ssh-keygen -H -f /tmp/known_hosts
/tmp/known_hosts updated.
Original contents retained as /tmp/known_hosts.old
WARNING: /tmp/known_hosts.old contains unhashed entries
Delete this file to ensure privacy of hostnames

$ cat /tmp/known_hosts # Notice there are 2 entries for github (one for the hostname and one for the IP address)
|1|4qZWjvVHHxTYxw2lnucPzsdLp6o=|tuiW8UXWs6oHyNtdoN6KS8vGMlY= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
|1|0mSFcPGnNffBwXAasikLZNYrV2U=|sE9igCXVIYVbWe0AXmMus+xEKyc= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
|1|jFXfFnYquy7fuhXTcvADgV6ET4Q=|O86lEEcv3R0fArMGl84xoQMNwTg= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJjcDyv2/2i6bk5YFZl2GNqdMRYeBWmogDXWGRpZo9Rgo6xQOWBRxMmDpdYCm40h68ilBRIdDUh9LnQVeHMDMw4=
|1|IwXQ8o8Or6dmzcSxdNr7yWXLTZ0=|JEzw90BlYVtK39lbKjur9+gBVtQ= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIGBymDXO+NxHqJ/11Qnuq/bgl4/p6cgbtk13JkFNnx/i

$ ./known_hosts2hashcat.sh /tmp/known_hosts
[+] Creating /tmp/known_hosts.hc
[+] Creating /tmp/ips_left.txt, /tmp/ips_right.txt
[+] Creating /tmp/names_common.txt
[+] Done, now run:
oclHashcat -a 1 -m 160 --hex-salt /tmp/known_hosts.hc /tmp/ips_left.txt /tmp/ips_right.txt
oclHashcat -m 160 --hex-salt /tmp/known_hosts.hc /tmp/names_common.txt

$ oclHashcat --quiet -a 1 -m 160 --hex-salt /tmp/known_hosts.hc /tmp/ips_left.txt /tmp/ips_right.txt
0d29c4f0f9d4c5141128d3d2e096931abebcdaff:7d1618af9044dce05221a85cdef6fe390475b798:192.30.252.130
acc254e17da299a33c26c46a65aefa135a53769e:efb086080e8f450dc768ae47d80802020b1decce:10.0.10.100

$ oclHashcat --quiet -m 160 --hex-salt /tmp/known_hosts.hc /tmp/names_common.txt
9144d1d153d8420a729c31476824b690f0f0299f:82db4b93b3a38bd554f3b77a283b374419accdda:github.com

# There are other tools to do this but I preferred a standalone Bash script.
https://blog.rootshell.be/2010/11/03/bruteforcing-ssh-known_hosts-files/
http://up1ink.tumblr.com/post/132370869368/bruteforcing-knownhosts-file-with-hashcat
https://www.phillips321.co.uk/2012/04/04/cracking-an-md5-of-an-ip-address/
https://github.com/Churro/bruteforce-known-hosts
'

if (( $# != 1 )) || [[ ! -f "$1" ]]; then
  echo "usage: $(basename $0) path/to/known_hosts"
  exit 2
fi

outfile="${1}.hc"
leftfile='/tmp/ips_left.txt'
rightfile='/tmp/ips_right.txt'
namesfile='/tmp/names_common.txt'

rm -f "$outfile"
echo "[+] Creating $outfile"
while read line; do
  x=$(echo "$line" | cut -b4- | cut -d' ' -f1 | cut -d'|' -f1 | base64 -d | xxd -ps)
  y=$(echo "$line" | cut -b4- | cut -d' ' -f1 | cut -d'|' -f2 | base64 -d | xxd -ps)
  echo "$y:$x" >> "$outfile"
done < "$1"

rm -f "$leftfile" "$rightfile"
echo "[+] Creating $leftfile, $rightfile"
for a in {0..255}; do
  for b in {0..255}; do
    echo "$a.$b." >> "$leftfile"
    echo "$a.$b" >> "$rightfile"
    
    # use this in case 192.168.1.1 was stored as 192.168.001.001 
    #printf "%03d.%03d.\n" $a $b >> "$leftfile"
    #printf "%03d.%03d\n" $a $b >> "$rightfile"

    # use this in case destination port was not 22/tcp
    #for c in {1..1024}; do
    #  echo "[$a.$b." >> "$leftfile"
    #  echo "$a.$b]:$c" >> "$rightfile"
    #done
  done
done

rm -f "$namesfile"
echo "[+] Creating $namesfile"
cat > "$namesfile" <<'EOF'
localhost
github.com
bitbucket.com
EOF

echo "[+] Done, now run:
oclHashcat -a 1 -m 160 --hex-salt $outfile $leftfile $rightfile
oclHashcat -m 160 --hex-salt $outfile $namesfile"
