#!/usr/bin/env python

# Copyright (C) 2015 Sebastien MACKE
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2, as published by the
# Free Software Foundation
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details (http://www.gnu.org/licenses/gpl.txt).

import re
import logging
from sys import argv, exit

formatter = logging.Formatter('%(asctime)s %(name)s %(levelname)7s - %(message)s', datefmt='%H:%M:%S')
handler = logging.StreamHandler()
handler.setLevel(logging.DEBUG)
handler.setFormatter(formatter)
logger = logging.getLogger('digvip')
#logger.setLevel(logging.DEBUG) # uncomment to enable debug messages
logger.addHandler(handler)

if len(argv) not in (2, 3):
  print('''Usage:
C:\\>sysinternals\psloglist.exe -s -i 4624,4768,4769,528 -accepteula security > security.csv
$ digvip.py security.csv [vips.txt]''')
  exit(2)

csv = argv[1]

vips = []
if len(argv) == 3:
  with open(argv[2]) as f:
    for l in f:
      vips.append(l.strip().lower())

logfmt = '%10s %11s %15s %-40s %s'

print("[+] Parsing: '%s'" % csv)
print("[+] Looking for: %s" % ", ".join(vips))
print(logfmt % ('Date', 'Time', 'Source IP', 'Domain\\account', 'Extra Info'))

found = []
for line in open(csv):
  line = line.rstrip()
  i = line.find(',"')
  if i < 0:
    logger.debug('Unmatching line: %s' % line)
    continue

  hdr = line[:i]
  msg = line[i+2:-1]
  _, _, _ , _, _, event_time, event_id, _ = hdr.split(',')
  
  logger.debug('%s %s - %s' % (event_time, event_id, msg))
  
  if event_id == '4624': # Account was successfully logged on
     exp = 'Account Name:\s+(?P<acctname>\S+)\s+Account Domain:\s+(?P<acctdomain>\S+)\s+Logon ID:\s+\S+\s+Logon GUID:.+Source Network Address:\s+(?P<cltaddr>\d+\.\d+\.\d+\.\d+)\s+Source Port:.+Logon Process:\s+(?P<logon>\S+)\s+Authentication Package:\s+(?P<authpkg>\S+)\s+Transited Services:'

  elif event_id == '4768': # Kerberos authentication ticket (TGT) was requested
    exp = 'Account Name:\s+(?P<acctname>\S+)\s+Supplied Realm Name:\s+(?P<acctdomain>\S+)\s+User ID:.+Client Address:\s+(?P<cltaddr>\d+\.\d+\.\d+\.\d+)\s+Client Port:'

  elif event_id == '4769': # Kerberos service ticket was requested
    exp = 'Account Name:\s+(?P<acctname>\S+)\s+Account Domain:\s+(?P<acctdomain>\S+)\s+Logon GUID:.+Client Address:\s+(?P<cltaddr>\d+\.\d+\.\d+\.\d+)\s+Client Port:'

  elif event_id == '528': # Successful Logon
    exp = 'User Name:\s+(?P<acctname>\S+)\s+Domain:\s+(?P<acctdomain>\S+)\s+.+Workstation Name:\s+(?P<wksname>\S+)\s+.+Caller Domain:\s+(?P<callerdomain>\S+)\s+.+Source Network Address:\s+(?P<cltaddr>\d+\.\d+\.\d+\.\d+)\s+'

  m = re.search(exp, msg)
  if not m:
    logger.debug('non-matching event')
    continue

  items = {'key': {}, 'extra': []}
  for k, v in m.groupdict().iteritems():
    if k in ['acctname', 'acctdomain', 'cltaddr']:
      items['key'][k] = v.lower()
    else:
      items['extra'].append(v)
  
  key = ':'.join(v for _,v in items['key'].iteritems())
  was_found = False

  for vip in vips:
    if vip in items['key']['acctname']:
      if key not in found: # comment out if you want to display all records, otherwise will only display most recent logon from a specific client IP
        found.append(key)
        was_found = True

  if was_found or not vips:
    date, time = event_time.split(' ', 1)
    print(logfmt % (date, time, items['key']['cltaddr'], '%s\\%s' % (items['key']['acctdomain'].upper(), items['key']['acctname']), ' '.join(items['extra'])))
